// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IMAGE_HONEYCRISP_SERIALIZED_H_
#define FLATBUFFERS_GENERATED_IMAGE_HONEYCRISP_SERIALIZED_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Honeycrisp {
namespace Serialized {

struct Image;
struct ImageBuilder;

struct Image FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ImageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMAGE_DATA = 4,
    VT_WIDTH = 6,
    VT_HEIGHT = 8
  };
  const ::flatbuffers::Vector<uint8_t> *image_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_IMAGE_DATA);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_image_data() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_IMAGE_DATA);
  }
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  bool mutate_width(int32_t _width = 0) {
    return SetField<int32_t>(VT_WIDTH, _width, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  bool mutate_height(int32_t _height = 0) {
    return SetField<int32_t>(VT_HEIGHT, _height, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IMAGE_DATA) &&
           verifier.VerifyVector(image_data()) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           verifier.EndTable();
  }
};

struct ImageBuilder {
  typedef Image Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_image_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> image_data) {
    fbb_.AddOffset(Image::VT_IMAGE_DATA, image_data);
  }
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(Image::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(Image::VT_HEIGHT, height, 0);
  }
  explicit ImageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Image>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Image> CreateImage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> image_data = 0,
    int32_t width = 0,
    int32_t height = 0) {
  ImageBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_image_data(image_data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Image> CreateImageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *image_data = nullptr,
    int32_t width = 0,
    int32_t height = 0) {
  auto image_data__ = image_data ? _fbb.CreateVector<uint8_t>(*image_data) : 0;
  return Honeycrisp::Serialized::CreateImage(
      _fbb,
      image_data__,
      width,
      height);
}

inline const Honeycrisp::Serialized::Image *GetImage(const void *buf) {
  return ::flatbuffers::GetRoot<Honeycrisp::Serialized::Image>(buf);
}

inline const Honeycrisp::Serialized::Image *GetSizePrefixedImage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Honeycrisp::Serialized::Image>(buf);
}

inline Image *GetMutableImage(void *buf) {
  return ::flatbuffers::GetMutableRoot<Image>(buf);
}

inline Honeycrisp::Serialized::Image *GetMutableSizePrefixedImage(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<Honeycrisp::Serialized::Image>(buf);
}

inline bool VerifyImageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Honeycrisp::Serialized::Image>(nullptr);
}

inline bool VerifySizePrefixedImageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Honeycrisp::Serialized::Image>(nullptr);
}

inline void FinishImageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Honeycrisp::Serialized::Image> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedImageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Honeycrisp::Serialized::Image> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Serialized
}  // namespace Honeycrisp

#endif  // FLATBUFFERS_GENERATED_IMAGE_HONEYCRISP_SERIALIZED_H_
